Parameters:
  codeBucketName:
    Description: The name of the s3 code bucket
    Type: String
    Default: cc-code-bucket
  GitHubOwner:
    Type: String
    Default: moinkhan3012
  GitHubRepo:
    Type: String
    Default: Smart-Photo-Album
  GitHubBranch:
    Type: String
    Default: main
  GitHubOAuthToken:
    Type: String
    Default: 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
  GitHubLink: 
    Type: String
    Default: https://github.com/moinkhan3012/Smart-Photo-Album.git
  artifactbucket:
    Description: The name of the s3 code bucket
    Type: String
    Default: cc-code-bartifactbucket
  elasticSearchKeyName:
    Description: The name of the s3 bucket layer key 
    Type: String
    Default: python.zip
  lambdaFunction1KeyName:
    Description: The name of the s3 bucket Lambda Fucntionnkey 
    Type: String
    Default: lf1.zip
  lambdaFunction2KeyName:
    Description: The name of the s3 bucket Lambda Fucntionnkey 
    Type: String
    Default: lf2.zip
  lambdaFunction1HandlerName:
    Description: The name of the s3 bucket Lambda Fucntionnkey 
    Type: String
    Default: lf1.lambda_handler
  lambdaFunction2HandlerName:
    Description: The name of the s3 bucket Lambda Fucntionnkey 
    Type: String
    Default: lf2.lambda_handler
  ESHOST:
    Description: Values of ES_HOST variable
    Type: String
    Default: search-photos-isqwrxukzkfqxsytucyvvbekae.us-east-1.es.amazonaws.com
  ESINDEXNAME:
    Description: Values of ES_INDEX_NAME variable
    Type: String
    Default: index-photos
  ESUSERNAME:
    Description: Values of ES_USERNAME variable
    Type: String
  ESPASSWORD:
    Description: Values of ES_PASSWORD variable
    Type: String
  BOTID:
    Description: Value for BOT_ID
    Default: LBIBFC4DPP
    Type: String
  SESSIONID:
    Description: Value for SESSION_ID
    Default: c7992896-c1fb-460b-9423-e43d4b48a355
    Type: String
  photoBucketName:
    Description: The name of the s3 bucket 
    Type: String
    Default: index-photo-bucket-cf
  frontendBucketName:
    Description: The name of the s3 bucket 
    Type: String
    Default: frontend-bucket-cf
  lambdaFunction1Name:
    Description: The name of the lambda function
    Type: String
    Default: index-photos-cf
  lambdaFunction2Name:
    Description: The name of the lambda function
    Type: String
    Default: search-photos-cf
Resources:
  #### Lambda function ####
  lf1:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: !Ref lambdaFunction1HandlerName
      Role: !GetAtt lf1role.Arn
      Code:
        S3Bucket: !Ref codeBucketName
        S3Key: !Ref lambdaFunction1KeyName
      Runtime: python3.9
      Timeout: 15
      Layers:
        - !Ref ElasticSearchLambdaLayer
      Environment:
        Variables:
          ES_HOST: !Ref ESHOST
          ES_INDEX_NAME: !Ref ESINDEXNAME
          ES_USERNAME: !Ref ESUSERNAME
          ES_PASSWORD: !Ref ESPASSWORD
  lf1role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      - "arn:aws:iam::aws:policy/AmazonRekognitionFullAccess"
  lf1log:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join
        - ''
        - - '/aws/lambda/'
          - !Ref lf1
    DependsOn: lf1
  lf2:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: !Ref lambdaFunction2HandlerName
      Role: !GetAtt lf2role.Arn
      Code:
        S3Bucket: !Ref codeBucketName
        S3Key: !Ref lambdaFunction2KeyName
      Runtime: python3.9
      Timeout: 15
      Layers:
        - !Ref ElasticSearchLambdaLayer
      Environment:
        Variables:
          ES_HOST: !Ref ESHOST
          ES_INDEX_NAME: !Ref ESINDEXNAME
          ES_USERNAME: !Ref ESUSERNAME
          ES_PASSWORD: !Ref ESPASSWORD
          BOT_ID: !Ref BOTID
          SESSION_ID: !Ref SESSIONID
  lf2role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      - "arn:aws:iam::aws:policy/AmazonLexFullAccess"
  lf2log:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join
        - ''
        - - '/aws/lambda/'
          - !Ref lf2
    DependsOn: lf2
  ### Lambda Layer ElasticSearch ###
  ElasticSearchLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: elastic-search
      Description: My Lambda Layer
      Content:
        S3Bucket: !Ref codeBucketName
        S3Key: !Ref elasticSearchKeyName
      CompatibleRuntimes:
        - python3.8
        - python3.9
        - python3.10
        - python3.11
  ### S3 Buckets ####
  photoBucket1CF:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Ref photoBucketName
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False
      OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
      NotificationConfiguration:
          LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt lf1.Arn  
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - PUT
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - x-amz-meta-customlabels
    DependsOn: lf1
  photoBucket1CFBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref photoBucket1CF
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
            Effect: Deny
            Resource:
              - !GetAtt photoBucket1CF.Arn
              - !Sub ${photoBucket1CF.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  frontendBucket2CF:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Ref frontendBucketName
      WebsiteConfiguration:
        IndexDocument: index.html
  frontendBucket2CFBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref frontendBucket2CF
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action:
              - "s3:GetObject"
            Effect: Deny
            Resource:
              - !GetAtt frontendBucket2CF.Arn
              - !Sub ${frontendBucket2CF.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  ### S3 Lambda Permission ###
  s3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt lf1.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt photoBucket1CF.Arn
  ### API Gateway
  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        openapi: "3.0.1"
        info:
          title: "AI Photo Search"
          description: "AI Photo Search application, built during the Cloud and Big Data course\
            \ at New York University."
          version: "1.0.0"
        paths:
          /upload/{bucket}/{key}:
            put:
              parameters:
              - name: "Content-Type"
                in: "header"
                schema:
                  type: "string"
              - name: "Accept"
                in: "header"
                schema:
                  type: "string"
              - name: "x-amz-meta-customLabels"
                in: "header"
                schema:
                  type: "string"
              - name: "key"
                in: "path"
                required: true
                schema:
                  type: "string"
              - name: "bucket"
                in: "path"
                required: true
                schema:
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    x-amz-meta-customLabels:
                      schema:
                        type: "string"
                  content: {}
              x-amazon-apigateway-integration:
                type: "aws"
                credentials: !GetAtt APIGatewayS3ProxyPolicyCF.Arn
                httpMethod: "PUT"
                uri: "arn:aws:apigateway:us-east-1:s3:path/{bucket}/{key}"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestParameters:
                  integration.request.header.x-amz-meta-customLabels: "method.request.header.x-amz-meta-customLabels"
                  integration.request.path.key: "method.request.path.key"
                  integration.request.path.bucket: "method.request.path.bucket"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_BINARY"
            options:
              parameters:
              - name: "bucket"
                in: "path"
                required: true
                schema:
                  type: "string"
              - name: "key"
                in: "path"
                required: true
                schema:
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content: {}
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,\
                        \ x-amz-meta-customLabels\t'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /search:
            get:
              operationId: "searchPhotos"
              parameters:
              - name: "q"
                in: "query"
                required: true
                schema:
                  type: "string"
              responses:
                "500":
                  description: "500 response"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Error"
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/SearchResponse"
                "403":
                  description: "403 response"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Error"
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Sub
                  - arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations
                  - LambdaFunctionArn: !GetAtt lf2.Arn
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content: {}
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
        components:
          schemas:
            Error:
              type: "object"
              properties:
                code:
                  type: "integer"
                  format: "int32"
                message:
                  type: "string"
            Photo:
              type: "object"
              properties:
                url:
                  type: "string"
                labels:
                  type: "array"
                  items:
                    type: "string"
            SearchResponse:
              type: "object"
              properties:
                results:
                  type: "array"
                  items:
                    $ref: "#/components/schemas/Photo"
        x-amazon-apigateway-gateway-responses:
          DEFAULT_4XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,\
                \ x-amz-meta-customLabels\t'"
          DEFAULT_5XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,\
                \ x-amz-meta-customLabels\t'"
        x-amazon-apigateway-binary-media-types:
        - "multipart/form-data"
        - "image/jpeg;base64"
        - "image/jpg;base64"
        - "image/png;base64"
  APIGatewayS3ProxyPolicyCF:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal: {Service: [apigateway.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
      - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

  ###### CodePipeline ######
  codebuildservicerole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - codebuild.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Description: 'Role for codebuild'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AdministratorAccess

  frontendpipelines3role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: 'Role for codepipeline to access S3'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  codebuildlambda:
    Type: AWS::CodeBuild::Project
    Properties: 
      Name: Test
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
        S3_FRONTEND_BUCKET: !Ref frontendBucketName
      ServiceRole: !GetAtt codebuildservicerole.Arn
      Source:
        BuildSpec: "codepipeline/buildspec_s3.yml"
        Location: !Ref GitHubLink
        Type: GITHUB
      Triggers:
        Webhook: True
        FilterGroups:
        - - Type: EVENT
            Pattern: PUSH

  frontendcodepipelines3:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref artifactbucket
        Type: S3
      RestartExecutionOnUpdate: False
      RoleArn: !GetAtt frontendpipelines3role.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                {
                  'Owner': !Ref GitHubOwner,
                  'Repo': !Ref GitHubRepo,
                  'Branch': !Ref GitHubBranch,
                  'OAuthToken': !Ref GitHubOAuthToken,
                }
              OutputArtifacts:
                - Name: 'ai-app'
              Region: us-east-1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref codebuildlambda
              InputArtifacts:
                - Name: ai-app
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                {
                  'BucketName': { 'Ref': 'frontendBucketName' },
                  'Extract': True
                }
              InputArtifacts:
                - Name: 'ai-app'
              Region: us-east-1
Outputs:
  frontendS3BucketWebsiteURL:
    Description: Public URL of the frontend S3 bucket
    Value: !GetAtt frontendBucket2CF.WebsiteURL

Transform: AWS::Serverless-2016-10-31